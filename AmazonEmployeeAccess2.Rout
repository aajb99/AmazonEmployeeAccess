
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #install.packages('tidyverse')
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.3     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> #install.packages('tidymodels')
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Learn how to get started at https://www.tidymodels.org/start/
> #install.packages('DataExplorer')
> #install.packages("poissonreg")
> # library(poissonreg)
> #install.packages("glmnet")
> library(glmnet)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Loaded glmnet 4.1-8
> #library(patchwork)
> # install.packages("rpart")
> #install.packages('ranger')
> library(ranger)
> #install.packages('stacks')
> library(stacks)
> #install.packages('vroom')
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> #install.packages('parsnip')
> library(parsnip)
> # install.packages('dbarts')
> # library(dbarts)
> #install.packages('embed')
> library(embed)
> library(themis)
> 
> # rm(list=ls()) use to erase environment
> 
> ## 112 Cols
> 
> data_train <- vroom("./data/train.csv") %>%
+   mutate(ACTION=factor(ACTION))# grab training data
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> #######################
> ##### Recipe/Bake #####
> #######################
> 
> rFormula <- ACTION ~ .
> 
> # my_recipe <- recipe(rFormula, data = data_train) %>% # set model formula and dataset
> #   step_mutate_at(all_numeric_predictors(), fn = factor) %>%
> #   step_other(all_nominal_predictors(), threshold = .01) %>% # get hours
> #   step_dummy(all_nominal_predictors()) # get dummy variables
> # 
> # prepped_recipe <- prep(my_recipe) # preprocessing new data
> # baked_data1 <- bake(prepped_recipe, new_data = data_train)
> 
> ## For target encoding/Random Forests: ###
> my_recipe <- recipe(rFormula, data = data_train) %>% # set model formula and dataset
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>%
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION))
> 
> prepped_recipe <- prep(my_recipe) # preprocessing new data
> baked_data1 <- bake(prepped_recipe, new_data = data_train)
> 
> # ncol(baked_data1)
> 
> 
> ########################################
> ##### Classification Random Forest #####
> ########################################
> 
> ########## The following should be uncommented for SMOTE ##############
> 
> class_rf_mod <- rand_forest(mtry = tune(),
+                             min_n = tune(),
+                             trees = 1000) %>% #Type of model
+   set_engine('ranger') %>%
+   set_mode('classification')
> 
> pretune_workflow <- workflow() %>%
+   add_recipe(my_recipe) %>%
+   add_model(class_rf_mod)
> 
> ## Grid of values to tune over
> tuning_grid <- grid_regular(mtry(range = c(1,ncol(data_train)-1)),
+                             min_n(),
+                             levels = 5) ## L^2 total tuning possibilities
> 
> # Split data for CV
> folds <- vfold_cv(data_train, v = 10, repeats = 1)
> 
> # Run CV
> CV_results <- pretune_workflow %>%
+   tune_grid(resamples = folds,
+             grid = tuning_grid,
+             metrics = metric_set(roc_auc))
→ A | warning: Model failed to converge with max|grad| = 0.339799 (tol = 0.002, component 1), Model is nearly unidentifiable: very large eigenvalue
                - Rescale variables?
There were issues with some computations   A: x1
→ B | warning: Model failed to converge with max|grad| = 0.421235 (tol = 0.002, component 1), Model is nearly unidentifiable: very large eigenvalue
                - Rescale variables?
There were issues with some computations   A: x1There were issues with some computations   A: x1   B: x1
→ C | warning: Model failed to converge with max|grad| = 0.420251 (tol = 0.002, component 1), Model is nearly unidentifiable: very large eigenvalue
                - Rescale variables?
There were issues with some computations   A: x1   B: x1There were issues with some computations   A: x1   B: x1   C: x1
→ D | warning: Model failed to converge with max|grad| = 0.424102 (tol = 0.002, component 1), Model is nearly unidentifiable: very large eigenvalue
                - Rescale variables?
There were issues with some computations   A: x1   B: x1   C: x1There were issues with some computations   A: x1   B: x1   C: x1   D: x1
→ E | warning: Model failed to converge with max|grad| = 0.343008 (tol = 0.002, component 1), Model is nearly unidentifiable: very large eigenvalue
                - Rescale variables?
There were issues with some computations   A: x1   B: x1   C: x1   D: x1There were issues with some computations   A: x1   B: x1   C: x1   D: x1   E: x1
There were issues with some computations   A: x1   B: x1   C: x1   D: x1   E: x1

> 
> bestTune <- CV_results %>%
+   select_best('roc_auc')
> 
> final_wf <- pretune_workflow %>%
+   finalize_workflow(bestTune) %>%
+   fit(data = data_train)
> 
> data_test <- vroom("./data/test.csv") # grab testing data
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> amazon_predictions <- predict(final_wf,
+                               new_data=data_test,
+                               type="prob") %>% # "class" or "prob"
+   mutate(Id = data_test$id) %>%
+   #mutate(ACTION = ifelse(.pred_1 > .95, 1, 0)) %>%
+   mutate(ACTION = .pred_1) %>%
+   select(-.pred_0, -.pred_1)
> 
> vroom_write(amazon_predictions, "./data/amazon_pred_rf4.csv", delim = ",")
> save(file = 'amazon_penalized_wf.RData', list = c('final_wf'))
> load('amazon_penalized_wf.RData')
> 
> proc.time()
    user   system  elapsed 
4302.408   81.450 3702.703 
